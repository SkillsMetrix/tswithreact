
interface BaseEmployee {
    id: number
    name: string
}
interface Engineer extends BaseEmployee{
    skills: string[]
}
interface HrEmployee extends BaseEmployee {
    policies: string[]
}
// generic fun with extends contraint

const printEmployeeDetails = <T extends BaseEmployee>(employee: T):void =>{
console.log(`ID : ${employee.id}, Name : ${employee.name}`);

}
//usage
const engineer:Engineer={
    id:101,
    name:'Bose',
    skills:["TS","react"]
}
const hr:HrEmployee={
    id:102,
    name:'mariya',
    policies:["Dress Policy","Work Policy"]
}
printEmployeeDetails(engineer)
printEmployeeDetails(hr)
 
//------default types

class EmployeeManager<T extends BaseEmployee=BaseEmployee>{
    private employees: T[]=[]
    addEmployee(emp:T):void {
        this.employees.push(emp)
    }
    list():void{
        this.employees.forEach(e=> console.log(`ID: ${e.id}, Name: ${e.name}`))
    }

}
// usage of default
const baseManager= new EmployeeManager()
baseManager.addEmployee({id:103,name:"Dummy user"})
baseManager.list()
// usage with specific type

const engManager= new EmployeeManager<Engineer>()
engManager.addEmployee({id:104,name:"Dummy user",skills:[""]})




-------------------



type Employee= {
    id: number
    name: string
    department:string
    salary: number
    isActive:boolean
}
//partial
function updateEmployee(id:number,updates:Partial<Employee>){
    console.log(`updating employee ${id} with`, updates);
    
}
updateEmployee(101, {name:"Alice",isActive:false})
// Pick
type EmployeeSummary=Pick<Employee , "id" | "name">

const summary: EmployeeSummary={
    id:101,
    name:'tom'
}
//return type

function createEmployee():Employee{
    return {
        id:101,
        name: 'julia',
        department: 'Eng',
        salary :2323,
        isActive: true
    }
}
type CreatedEmployee= ReturnType<typeof createEmployee>
// keep types in sync between fun output and var or other api conuming the result
const newEmp:CreatedEmployee=createEmployee()

//Awaited ( unwraps the resolved type of Promise)

async function fetchEmployee():Promise<Employee> {
    // simulating API calls
   return {
        id:101,
        name: 'julia',
        department: 'Eng',
        salary :2323,
        isActive: true
    }
}

type EmployeeData= Awaited<ReturnType<typeof fetchEmployee>>
const emp: EmployeeData=await fetchEmployee() // same as type Employee
